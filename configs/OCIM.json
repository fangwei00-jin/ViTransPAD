{
    "data_loader": {
        "w": 224,
        "h": 224,
        "sample_length": 8,
        "Transformer_layers": 6,
        "Transformer_heads": [2,3],
        "##**backbone: EfficientNet patches [28,14,7] *** Vit(from vit_pytorch) patches [32,16,8,4,2] *** Vit(from timme) patches [16,8,4,2] ***":"",
        "patchsize":[112,56,28,14,7,4,2],
        "#patchsize":[32,16,8,4,2],
        "#model": "sttn_vit",
        "#model": "sttn_CNN",
        "model": "sttn_transformer",
        "#model": "sttn_transformer_attent_FC",
        "#model": "sttn_transformer_attent_FC_NoEncoder",
        "#model": "sttn_transformer_attent_Vit",
        "#model": "sttn_transformer_Efficientnet_FrameAtten",
        "backbone": "EfficientNet",
        "#backbone": "Vit_pretrained",
        "#backbone": "Vit",
        "#backbone": "None",
        "#### feature maps from each layer of backbone EfficientNet ####": "",
        "### Block 0_projt_conv/bn2 (16,112,112) , i.e. feature map (channel, height, width)": "",
        "### Block 1,2_projt_conv (24,56,56)": "",
        "### Block 3,4_projt_conv (40,28,28)": "",
        "### Block 5,6,7_projt_conv (80,14,14)": "",
        "### Block 8,9,10_projt_conv (112,14,14)": "",
        "### Block 11,12,13,14_projt_conv (192,7,7)": "",
        "### Block 15_projt_conv (320,7,7)": "",
        "### Bottleneck_conv-head/_bn1(1280,7,7)": "",
        "#featurelayer": "model_backbone._blocks[2]._bn2",
        "featurelayer": "model_backbone._conv_head",
        "#Transformer output's shape should be same as input emebedding (dimension/channel, size) enabling the following concatenation x+att(x)": "",
        "##EfficientNet channel 80 *** Vit from vit_pytorch channel 65 *** Vit from timm channel 3": "",
        "channel": 80,
        "#channel": 24,
        "#channel": 65,
        "#channel": 3,
        "#mode": "dataset_image",
        "mode": "dataset_video",
        "#mode": "dataset_video_meta",
        "#mode": "dataset_video_meta_",
        "##class is 2 for standard binary Bonafide|Attack classification or X for fine-grainde attack type classification": "",
        "class": 2
    },
    "train": {
        "seed": 2020,
        "data_root": "/data/zming/datasets/Anti-spoof/OCIM/train",
        "#data_root": "/data/zming/datasets/Anti-spoof/OCIM/test",
        "save_dir": "/data/zming/models/Depth_antispoof/tmp_test/",
        "#Meta-learning strategy. This option is null if do not use Meta-learning": "",
        "meta_learning": "",
        "#meta_learning": "MAML",
        "modality can include one or two modality for training the model. If Meta-learning is used, modality should follow the meta-training / meta-test protocol format": "",
        "modality": ["file_csv_OCI.json"],
        "#modality": ["file_csv_OC.json,REPLAY.json;file_csv_OI.json,CASIA.json;file_csv_CI.json,OuluNPU.json"],
        "train_module": "core.trainer_transformer",
        "#train_module": "core.trainer_transformer_meta",
        "#train_module": "core.trainer_transformer_meta_",
        "#pretrained_model": "",
        "#pretrained_model": "/data/zming/models/Depth_antispoof/Transformer_Depth/OCIM/tmp163/sttn_transformer_attent_FC_OCIM/gen_00010.pth",
        "pretrained_model": "/data/zming/models/Depth_antispoof/Transformer_Depth/OCIM/tmp94/sttn_transformer_OCIM/gen_00265.pth",
        "face_scale": [1.2, 1.5],
         "losses": {
            "hole_weight": 1,
            "valid_weight": 1,
            "adversarial_weight": 0.01,
            "GAN_LOSS": "hinge"
        },
        "trainer": {
            "type": "Adam",
            "beta1": 0,
            "beta2": 0.99,
            "lr": 5e-5,
            "d2glr": 1,
            "#batch_size": 128,
            "batch_size": 1,
            "#num_workers": 16,
            "num_workers": 0,
            "verbosity": 2,
            "log_step": 100,
            "save_freq": 268,
            "#valid_freq": 1e4,
            "valid_freq": 10,
            "eval_epoch_num": 5,
            "iterations": 50e4,
            "niter": 15e4,
            "niter_steady": 30e4,
            "update_step": 3

        }
    },

    "test": {
        "test_data": "/data/zming/datasets/Anti-spoof/OCIM/test/MSU.json",
        "val_data": "/data/zming/datasets/Anti-spoof/OCIM/test/MSU.json",
        "ckpt": "",
        "save_dir": "",
        "face_scale": 1.3,
        "test_module": "core.eval_transformer"
    }
}
